name: Deploy to EC2

on:
  push:
    branches:
      - main   # only deploy when pushing to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Build frontend before uploading
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          CI=false npm run build

      # Prepare SSH private key from secret
      - name: Prepare SSH key
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "$EC2_KEY" > key.pem
          chmod 600 key.pem

      # Sync frontend build → EC2
      - name: Sync FRONTEND build to EC2
        run: |
          rsync -avz --delete \
            -e "ssh -i key.pem -o StrictHostKeyChecking=no" \
            frontend/build/ \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/frontend/build/

      # Sync backend source → EC2 (skip node_modules + .env)
      - name: Sync BACKEND source to EC2
        run: |
          rsync -avz --delete \
            --exclude "node_modules" \
            --exclude ".env" \
            -e "ssh -i key.pem -o StrictHostKeyChecking=no" \
            backend/ \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/backend/

      # Install backend deps + restart API via PM2
      - name: Install backend deps + restart API on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOSSH'
              set -e
              cd ${{ secrets.EC2_PATH }}/backend
              npm ci --omit=dev
              pm2 restart mhss-api || pm2 start server.js --name mhss-api
              sudo systemctl reload nginx || true
          EOSSH